name: CMake_Linux

on: 
  push:        
  pull_request:
    branches:
    - main
    
jobs:
  build-linux:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest

    # Only run this job if the commit message does not contain [skip ci] or [skip linux]
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip linux]')"
    
    timeout-minutes: 5
    
    steps:  
      # Checkout the repository
    - uses: actions/checkout@v3

    - name: Remove Debug Logs
      shell: bash
      run: |
        find . -type f \( -name "*.csv" -o -name "*.log" -o -name "*.txt" \) -not -name "CMakeLists.txt" -exec rm {} \;

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory build

    - name: Configure CMake
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, this is only available with CMake 3.13 and higher.  
      run: cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -S . -Bbuild

    - name: Build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build build --config Debug

    # - name: CTest
    #   shell: bash
    #   run: |
    #     cd build/src/Test
    #     ctest -C Debug -VV --timeout 100

    - name: Test 0
      shell: bash
      run: ./build/src/ProjectScenarios/ProjectScenarios 0

    - name: Test 1
      shell: bash
      run: |
        find . -type f \( -name "*.csv" -o -name "*.log" -o -name "*.txt" \) -not -name "CMakeLists.txt" -exec rm {} \;
        ./build/src/ProjectScenarios/ProjectScenarios 1
        if [ -f "./DebugLog.csv" ] ; then
          echo "Found DebugLog.csv";
          cat DebugLog.csv;
        elif [ -f "./build/src/ProjectScenarios/DebugLog.csv" ] ; then 
          echo "Found DebugLog.csv";
          cat ./build/src/ProjectScenarios/DebugLog.csv;
        else        
          # Search for CSV and LOG files recursively
          files=$(find . -type f \( -name "*.csv" -o -name "*.log" -o -name "*.txt" \) -not -name "CMakeLists.txt" -exec rm {} \; )
          
          # Check if any files were found
          if [ -z "$files" ]; then
            echo "Error: Did not find DebugLog.csv! Found No files found that contain 'leak' or 'Leak'"
            exit 1
          fi

          count=0
          
          # Loop through the files and print each one
          for file in $files; do
            if grep -qE "[Ll]eak" "$file"; then
              echo "Found file: $file"
              cat "$file"
              ((count++))
            fi
          done

          # Check if count is 0 and print an error if it is
          if [ "$count" -eq 0 ]; then
            echo "Error: Did not find DebugLog.csv! Found No files found that contain 'leak' or 'Leak'"
            exit 1
          fi
        fi
